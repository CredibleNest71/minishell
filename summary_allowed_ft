readline: Reads a line from the standard input, allowing line editing capabilities.

rl_clear_history: Clears the history list maintained by the readline library.

rl_on_new_line: Signals readline that the cursor is on a new line.

rl_replace_line: Replaces the contents of the current readline line buffer.

rl_redisplay: Forces a redisplay of the current input line.

add_history: Adds a line to the readline history.

//printf: Prints formatted output to the standard output.

malloc: Allocates a block of memory on the heap.

free: Deallocates a block of memory previously allocated by malloc.

write: Writes data to a file descriptor.

access: Checks the accessibility of a file.

open: Opens a file or creates a new file.

read: Reads data from a file descriptor.

close: Closes a file descriptor.

fork: Creates a new process by duplicating the existing process.

wait: Suspends the calling process until one of its child processes terminates.

waitpid, wait3, wait4: Wait for a specific process or any child process to terminate.

signal, sigaction: Establishes a signal handler for a specific signal.

sigemptyset, sigaddset: Manipulate signal sets for signal handling.

kill: Sends a signal to a process or a group of processes.

exit: Exits the current process.

getcwd: Gets the current working directory.

chdir: Changes the current working directory.

stat, lstat, fstat: Retrieve information about a file or file descriptor. ***

unlink: Removes a file. ***

execve: Executes a program.

dup, dup2: Duplicates file descriptors.

pipe: Creates an interprocess communication channel.

opendir, readdir, closedir: Functions for working with directories. *

strerror: Returns a string describing the last error.

perror: Prints a description for the last error to the standard error.

isatty: Tests whether a file descriptor refers to a terminal. *?

ttyname: Returns the name associated with a terminal.

ttyslot: Gets the slot number of the current terminal in the user database.

ioctl: Performs I/O control operations on file descriptors.

getenv: Retrieves the value of an environment variable.

tcsetattr, tcgetattr: Gets and sets terminal attributes.

tgetent, tgetflag, tgetnum, tgetstr, tgoto, tputs: Functions for working with termcap/terminfo databases, used for terminal handling.